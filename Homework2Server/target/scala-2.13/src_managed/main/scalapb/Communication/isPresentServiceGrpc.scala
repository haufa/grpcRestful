// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package Communication


object isPresentServiceGrpc {
  val METHOD_SEARCH_REQUEST: _root_.io.grpc.MethodDescriptor[Communication.isPresentRequest, Communication.isPresentReply] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("isPresentService", "SearchRequest"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[Communication.isPresentRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[Communication.isPresentReply])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(Communication.CommunicationProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("isPresentService")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(Communication.CommunicationProto.javaDescriptor))
      .addMethod(METHOD_SEARCH_REQUEST)
      .build()
  
  trait isPresentService extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion = isPresentService
    def searchRequest(request: Communication.isPresentRequest): scala.concurrent.Future[Communication.isPresentReply]
  }
  
  object isPresentService extends _root_.scalapb.grpc.ServiceCompanion[isPresentService] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[isPresentService] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = Communication.CommunicationProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = Communication.CommunicationProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: isPresentService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_SEARCH_REQUEST,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[Communication.isPresentRequest, Communication.isPresentReply] {
          override def invoke(request: Communication.isPresentRequest, observer: _root_.io.grpc.stub.StreamObserver[Communication.isPresentReply]): _root_.scala.Unit =
            serviceImpl.searchRequest(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .build()
  }
  
  trait isPresentServiceBlockingClient {
    def serviceCompanion = isPresentService
    def searchRequest(request: Communication.isPresentRequest): Communication.isPresentReply
  }
  
  class isPresentServiceBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[isPresentServiceBlockingStub](channel, options) with isPresentServiceBlockingClient {
    override def searchRequest(request: Communication.isPresentRequest): Communication.isPresentReply = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SEARCH_REQUEST, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): isPresentServiceBlockingStub = new isPresentServiceBlockingStub(channel, options)
  }
  
  class isPresentServiceStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[isPresentServiceStub](channel, options) with isPresentService {
    override def searchRequest(request: Communication.isPresentRequest): scala.concurrent.Future[Communication.isPresentReply] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SEARCH_REQUEST, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): isPresentServiceStub = new isPresentServiceStub(channel, options)
  }
  
  object isPresentServiceStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[isPresentServiceStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): isPresentServiceStub = new isPresentServiceStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[isPresentServiceStub] = this
  }
  
  def bindService(serviceImpl: isPresentService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = isPresentService.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): isPresentServiceBlockingStub = new isPresentServiceBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): isPresentServiceStub = new isPresentServiceStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = Communication.CommunicationProto.javaDescriptor.getServices().get(0)
  
}